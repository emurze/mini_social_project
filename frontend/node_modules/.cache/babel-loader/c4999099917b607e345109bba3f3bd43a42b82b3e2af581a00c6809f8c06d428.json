{"ast":null,"code":"import Action from \"../Actions\";\nimport { UsersPaginationActions } from \"../UsersPaginationActions\";\nlet initialState = {\n  'users': [],\n  'page_size': 0,\n  'page_count': 0,\n  'current_page': 1,\n  'isFetching': true\n};\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case Action.SET_USERS:\n      return [...structuredClone(state), ...action.users];\n    case Action.SET_PAGE_SIZE:\n      {\n        let stateCopy = structuredClone(state);\n        stateCopy.page_size = action.page_size;\n        return stateCopy;\n      }\n    case Action.SET_PAGE_COUNT:\n      {\n        let stateCopy = structuredClone(state);\n        stateCopy.page_count = action.page_count;\n        return stateCopy;\n      }\n    case Action.SET_CURRENT_PAGE:\n      {\n        let stateCopy = structuredClone(state);\n        stateCopy.current_page = action.current_page;\n        return stateCopy;\n      }\n    case Action.UPDATE_CURRENT_PAGE_ON_ARROWS:\n      {\n        let stateCopy = structuredClone(state);\n        const pages = stateCopy.page_count / stateCopy.page_size;\n        const max_constraint = stateCopy.current_page < pages;\n        const min_constraint = stateCopy.current_page > 1;\n        if (action.page_action === UsersPaginationActions.Next && max_constraint) {\n          stateCopy.current_page++;\n        } else if (action.page_action === UsersPaginationActions.Previous && min_constraint) {\n          stateCopy.current_page--;\n        }\n        return stateCopy;\n      }\n    case Action.TOGGLE_IS_FETCHING:\n      {\n        let stateCopy = structuredClone(state);\n        stateCopy.isFatching = action.isFetching;\n        return stateCopy;\n      }\n    default:\n      return state;\n  }\n};\nexport default usersReducer;","map":{"version":3,"names":["Action","UsersPaginationActions","initialState","usersReducer","state","arguments","length","undefined","action","type","SET_USERS","structuredClone","users","SET_PAGE_SIZE","stateCopy","page_size","SET_PAGE_COUNT","page_count","SET_CURRENT_PAGE","current_page","UPDATE_CURRENT_PAGE_ON_ARROWS","pages","max_constraint","min_constraint","page_action","Next","Previous","TOGGLE_IS_FETCHING","isFatching","isFetching"],"sources":["/home/adm1/Desktop/react/projects/project_1/frontend/src/redux/reducers/usersReducer.js"],"sourcesContent":["import Action from \"../Actions\";\nimport {UsersPaginationActions} from \"../UsersPaginationActions\";\n\nlet initialState = {\n\t'users': [],\n\t'page_size': 0,\n\t'page_count': 0,\n\t'current_page': 1,\n\t'isFetching': true,\n}\n\nconst usersReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase Action.SET_USERS:\n\t\t\treturn [...structuredClone(state), ...action.users]\n\t\tcase Action.SET_PAGE_SIZE: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tstateCopy.page_size = action.page_size\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase Action.SET_PAGE_COUNT: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tstateCopy.page_count = action.page_count\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase Action.SET_CURRENT_PAGE: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tstateCopy.current_page = action.current_page\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase Action.UPDATE_CURRENT_PAGE_ON_ARROWS: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tconst pages = stateCopy.page_count / stateCopy.page_size\n\t\t\tconst max_constraint = stateCopy.current_page < pages\n\t\t\tconst min_constraint = stateCopy.current_page > 1\n\n\t\t\tif (action.page_action === UsersPaginationActions.Next\n\t\t\t\t&& max_constraint){\n\t\t\t\tstateCopy.current_page++}\n\t\t\telse if (action.page_action === UsersPaginationActions.Previous\n\t\t\t\t     && min_constraint) {\n\t\t\t\tstateCopy.current_page--\n\t\t\t}\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase Action.TOGGLE_IS_FETCHING: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tstateCopy.isFatching = action.isFetching\n\t\t\treturn stateCopy\n\t\t}\n\t\tdefault: return state\n\t}\n}\n\nexport default usersReducer;"],"mappings":"AAAA,OAAOA,MAAM,MAAM,YAAY;AAC/B,SAAQC,sBAAsB,QAAO,2BAA2B;AAEhE,IAAIC,YAAY,GAAG;EAClB,OAAO,EAAE,EAAE;EACX,WAAW,EAAE,CAAC;EACd,YAAY,EAAE,CAAC;EACf,cAAc,EAAE,CAAC;EACjB,YAAY,EAAE;AACf,CAAC;AAED,MAAMC,YAAY,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,YAAY;EAAA,IAAEM,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACjD,QAAQC,MAAM,CAACC,IAAI;IAClB,KAAKT,MAAM,CAACU,SAAS;MACpB,OAAO,CAAC,GAAGC,eAAe,CAACP,KAAK,CAAC,EAAE,GAAGI,MAAM,CAACI,KAAK,CAAC;IACpD,KAAKZ,MAAM,CAACa,aAAa;MAAE;QAC1B,IAAIC,SAAS,GAAGH,eAAe,CAACP,KAAK,CAAC;QACtCU,SAAS,CAACC,SAAS,GAAGP,MAAM,CAACO,SAAS;QACtC,OAAOD,SAAS;MACjB;IACA,KAAKd,MAAM,CAACgB,cAAc;MAAE;QAC3B,IAAIF,SAAS,GAAGH,eAAe,CAACP,KAAK,CAAC;QACtCU,SAAS,CAACG,UAAU,GAAGT,MAAM,CAACS,UAAU;QACxC,OAAOH,SAAS;MACjB;IACA,KAAKd,MAAM,CAACkB,gBAAgB;MAAE;QAC7B,IAAIJ,SAAS,GAAGH,eAAe,CAACP,KAAK,CAAC;QACtCU,SAAS,CAACK,YAAY,GAAGX,MAAM,CAACW,YAAY;QAC5C,OAAOL,SAAS;MACjB;IACA,KAAKd,MAAM,CAACoB,6BAA6B;MAAE;QAC1C,IAAIN,SAAS,GAAGH,eAAe,CAACP,KAAK,CAAC;QACtC,MAAMiB,KAAK,GAAGP,SAAS,CAACG,UAAU,GAAGH,SAAS,CAACC,SAAS;QACxD,MAAMO,cAAc,GAAGR,SAAS,CAACK,YAAY,GAAGE,KAAK;QACrD,MAAME,cAAc,GAAGT,SAAS,CAACK,YAAY,GAAG,CAAC;QAEjD,IAAIX,MAAM,CAACgB,WAAW,KAAKvB,sBAAsB,CAACwB,IAAI,IAClDH,cAAc,EAAC;UAClBR,SAAS,CAACK,YAAY,EAAE;QAAA,CAAC,MACrB,IAAIX,MAAM,CAACgB,WAAW,KAAKvB,sBAAsB,CAACyB,QAAQ,IACtDH,cAAc,EAAE;UACxBT,SAAS,CAACK,YAAY,EAAE;QACzB;QACA,OAAOL,SAAS;MACjB;IACA,KAAKd,MAAM,CAAC2B,kBAAkB;MAAE;QAC/B,IAAIb,SAAS,GAAGH,eAAe,CAACP,KAAK,CAAC;QACtCU,SAAS,CAACc,UAAU,GAAGpB,MAAM,CAACqB,UAAU;QACxC,OAAOf,SAAS;MACjB;IACA;MAAS,OAAOV,KAAK;EACtB;AACD,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}