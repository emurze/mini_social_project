{"ast":null,"code":"import Action from \"../actions/Actions\";\nimport { UsersPaginationAction } from \"../actions/UsersPaginationAction\";\nlet initialState = {\n  'users': [],\n  'page_size': 0,\n  'page_count': 0,\n  'current_page': 1,\n  'isFetching': false\n};\nconst usersReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case Action.SET_USERS:\n      {\n        let stateCopy = structuredClone(state);\n        stateCopy.users = action.users;\n        return stateCopy;\n      }\n    case Action.SET_PAGE_COUNT:\n      {\n        let stateCopy = structuredClone(state);\n        stateCopy.page_count = action.page_count;\n        return stateCopy;\n      }\n    case Action.SET_CURRENT_PAGE:\n      {\n        let stateCopy = structuredClone(state);\n        stateCopy.current_page = action.current_page;\n        return stateCopy;\n      }\n    case Action.UPDATE_CURRENT_PAGE_ON_ARROWS:\n      {\n        let stateCopy = structuredClone(state);\n        const pages = stateCopy.page_count / stateCopy.page_size;\n        const max_constraint = stateCopy.current_page < pages;\n        const min_constraint = stateCopy.current_page > 1;\n        if (action.page_action === UsersPaginationAction.Next && max_constraint) {\n          stateCopy.current_page++;\n        } else if (action.page_action === UsersPaginationAction.Previous && min_constraint) {\n          stateCopy.current_page--;\n        }\n        return stateCopy;\n      }\n    case Action.HIDE_LOADED_USERS:\n      {\n        let stateCopy = structuredClone(state);\n        stateCopy.users = [];\n        return stateCopy;\n      }\n    case Action.TOGGLE_IS_FETCHING:\n      {\n        let stateCopy = structuredClone(state);\n        stateCopy.isFetching = action.isFetching;\n        return stateCopy;\n      }\n    default:\n      return state;\n  }\n};\nexport default usersReducer;","map":{"version":3,"names":["Action","UsersPaginationAction","initialState","usersReducer","state","arguments","length","undefined","action","type","SET_USERS","stateCopy","structuredClone","users","SET_PAGE_COUNT","page_count","SET_CURRENT_PAGE","current_page","UPDATE_CURRENT_PAGE_ON_ARROWS","pages","page_size","max_constraint","min_constraint","page_action","Next","Previous","HIDE_LOADED_USERS","TOGGLE_IS_FETCHING","isFetching"],"sources":["/home/adm1/Desktop/react/projects/project_1/frontend/src/redux/reducers/usersReducer.js"],"sourcesContent":["import Action from \"../actions/Actions\";\nimport {\n\tUsersPaginationAction,\n} from \"../actions/UsersPaginationAction\";\n\nlet initialState = {\n\t'users': [],\n\t'page_size': 0,\n\t'page_count': 0,\n\t'current_page': 1,\n\t'isFetching': false,\n}\n\nconst usersReducer = (state = initialState, action) => {\n\tswitch (action.type) {\n\t\tcase Action.SET_USERS: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tstateCopy.users = action.users\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase Action.SET_PAGE_COUNT: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tstateCopy.page_count = action.page_count\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase Action.SET_CURRENT_PAGE: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tstateCopy.current_page = action.current_page\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase Action.UPDATE_CURRENT_PAGE_ON_ARROWS: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tconst pages = stateCopy.page_count / stateCopy.page_size\n\t\t\tconst max_constraint = stateCopy.current_page < pages\n\t\t\tconst min_constraint = stateCopy.current_page > 1\n\n\t\t\tif (action.page_action === UsersPaginationAction.Next\n\t\t\t\t&& max_constraint){\n\t\t\t\tstateCopy.current_page++}\n\t\t\telse if (action.page_action === UsersPaginationAction.Previous\n\t\t\t\t     && min_constraint) {\n\t\t\t\tstateCopy.current_page--\n\t\t\t}\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase Action.HIDE_LOADED_USERS: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tstateCopy.users = []\n\t\t\treturn stateCopy\n\t\t}\n\t\tcase Action.TOGGLE_IS_FETCHING: {\n\t\t\tlet stateCopy = structuredClone(state)\n\t\t\tstateCopy.isFetching = action.isFetching\n\t\t\treturn stateCopy\n\t\t}\n\t\tdefault: return state\n\t}\n}\n\nexport default usersReducer;"],"mappings":"AAAA,OAAOA,MAAM,MAAM,oBAAoB;AACvC,SACCC,qBAAqB,QACf,kCAAkC;AAEzC,IAAIC,YAAY,GAAG;EAClB,OAAO,EAAE,EAAE;EACX,WAAW,EAAE,CAAC;EACd,YAAY,EAAE,CAAC;EACf,cAAc,EAAE,CAAC;EACjB,YAAY,EAAE;AACf,CAAC;AAED,MAAMC,YAAY,GAAG,SAAAA,CAAA,EAAkC;EAAA,IAAjCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGH,YAAY;EAAA,IAAEM,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EACjD,QAAQC,MAAM,CAACC,IAAI;IAClB,KAAKT,MAAM,CAACU,SAAS;MAAE;QACtB,IAAIC,SAAS,GAAGC,eAAe,CAACR,KAAK,CAAC;QACtCO,SAAS,CAACE,KAAK,GAAGL,MAAM,CAACK,KAAK;QAC9B,OAAOF,SAAS;MACjB;IACA,KAAKX,MAAM,CAACc,cAAc;MAAE;QAC3B,IAAIH,SAAS,GAAGC,eAAe,CAACR,KAAK,CAAC;QACtCO,SAAS,CAACI,UAAU,GAAGP,MAAM,CAACO,UAAU;QACxC,OAAOJ,SAAS;MACjB;IACA,KAAKX,MAAM,CAACgB,gBAAgB;MAAE;QAC7B,IAAIL,SAAS,GAAGC,eAAe,CAACR,KAAK,CAAC;QACtCO,SAAS,CAACM,YAAY,GAAGT,MAAM,CAACS,YAAY;QAC5C,OAAON,SAAS;MACjB;IACA,KAAKX,MAAM,CAACkB,6BAA6B;MAAE;QAC1C,IAAIP,SAAS,GAAGC,eAAe,CAACR,KAAK,CAAC;QACtC,MAAMe,KAAK,GAAGR,SAAS,CAACI,UAAU,GAAGJ,SAAS,CAACS,SAAS;QACxD,MAAMC,cAAc,GAAGV,SAAS,CAACM,YAAY,GAAGE,KAAK;QACrD,MAAMG,cAAc,GAAGX,SAAS,CAACM,YAAY,GAAG,CAAC;QAEjD,IAAIT,MAAM,CAACe,WAAW,KAAKtB,qBAAqB,CAACuB,IAAI,IACjDH,cAAc,EAAC;UAClBV,SAAS,CAACM,YAAY,EAAE;QAAA,CAAC,MACrB,IAAIT,MAAM,CAACe,WAAW,KAAKtB,qBAAqB,CAACwB,QAAQ,IACrDH,cAAc,EAAE;UACxBX,SAAS,CAACM,YAAY,EAAE;QACzB;QACA,OAAON,SAAS;MACjB;IACA,KAAKX,MAAM,CAAC0B,iBAAiB;MAAE;QAC9B,IAAIf,SAAS,GAAGC,eAAe,CAACR,KAAK,CAAC;QACtCO,SAAS,CAACE,KAAK,GAAG,EAAE;QACpB,OAAOF,SAAS;MACjB;IACA,KAAKX,MAAM,CAAC2B,kBAAkB;MAAE;QAC/B,IAAIhB,SAAS,GAAGC,eAAe,CAACR,KAAK,CAAC;QACtCO,SAAS,CAACiB,UAAU,GAAGpB,MAAM,CAACoB,UAAU;QACxC,OAAOjB,SAAS;MACjB;IACA;MAAS,OAAOP,KAAK;EACtB;AACD,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}